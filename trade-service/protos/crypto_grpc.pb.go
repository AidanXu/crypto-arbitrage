// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package mycrypto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TradeStreamClient is the client API for TradeStream service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TradeStreamClient interface {
	StreamTrades(ctx context.Context, in *TradeRequest, opts ...grpc.CallOption) (*TradeResponse, error)
}

type tradeStreamClient struct {
	cc grpc.ClientConnInterface
}

func NewTradeStreamClient(cc grpc.ClientConnInterface) TradeStreamClient {
	return &tradeStreamClient{cc}
}

func (c *tradeStreamClient) StreamTrades(ctx context.Context, in *TradeRequest, opts ...grpc.CallOption) (*TradeResponse, error) {
	out := new(TradeResponse)
	err := c.cc.Invoke(ctx, "/crypto.TradeStream/StreamTrades", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TradeStreamServer is the server API for TradeStream service.
// All implementations must embed UnimplementedTradeStreamServer
// for forward compatibility
type TradeStreamServer interface {
	StreamTrades(context.Context, *TradeRequest) (*TradeResponse, error)
	mustEmbedUnimplementedTradeStreamServer()
}

// UnimplementedTradeStreamServer must be embedded to have forward compatible implementations.
type UnimplementedTradeStreamServer struct {
}

func (UnimplementedTradeStreamServer) StreamTrades(context.Context, *TradeRequest) (*TradeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StreamTrades not implemented")
}
func (UnimplementedTradeStreamServer) mustEmbedUnimplementedTradeStreamServer() {}

// UnsafeTradeStreamServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TradeStreamServer will
// result in compilation errors.
type UnsafeTradeStreamServer interface {
	mustEmbedUnimplementedTradeStreamServer()
}

func RegisterTradeStreamServer(s grpc.ServiceRegistrar, srv TradeStreamServer) {
	s.RegisterService(&TradeStream_ServiceDesc, srv)
}

func _TradeStream_StreamTrades_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TradeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradeStreamServer).StreamTrades(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crypto.TradeStream/StreamTrades",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradeStreamServer).StreamTrades(ctx, req.(*TradeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TradeStream_ServiceDesc is the grpc.ServiceDesc for TradeStream service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TradeStream_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "crypto.TradeStream",
	HandlerType: (*TradeStreamServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StreamTrades",
			Handler:    _TradeStream_StreamTrades_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/crypto.proto",
}
